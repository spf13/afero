// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	fs "io/fs"

	io "io"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/spf13/afero/ossfs/internal/utils"
)

// ObjectManager is an autogenerated mock type for the ObjectManager type
type ObjectManager struct {
	mock.Mock
}

// CopyObject provides a mock function with given fields: ctx, bucket, srcName, targetName
func (_m *ObjectManager) CopyObject(ctx context.Context, bucket string, srcName string, targetName string) error {
	ret := _m.Called(ctx, bucket, srcName, targetName)

	if len(ret) == 0 {
		panic("no return value specified for CopyObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, bucket, srcName, targetName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteObject provides a mock function with given fields: ctx, bucket, name
func (_m *ObjectManager) DeleteObject(ctx context.Context, bucket string, name string) error {
	ret := _m.Called(ctx, bucket, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucket, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetObject provides a mock function with given fields: ctx, bucket, name
func (_m *ObjectManager) GetObject(ctx context.Context, bucket string, name string) (io.Reader, utils.CleanUp, error) {
	ret := _m.Called(ctx, bucket, name)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 io.Reader
	var r1 utils.CleanUp
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.Reader, utils.CleanUp, error)); ok {
		return rf(ctx, bucket, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.Reader); ok {
		r0 = rf(ctx, bucket, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) utils.CleanUp); ok {
		r1 = rf(ctx, bucket, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.CleanUp)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, bucket, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetObjectMeta provides a mock function with given fields: ctx, bucket, name
func (_m *ObjectManager) GetObjectMeta(ctx context.Context, bucket string, name string) (fs.FileInfo, error) {
	ret := _m.Called(ctx, bucket, name)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectMeta")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (fs.FileInfo, error)); ok {
		return rf(ctx, bucket, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) fs.FileInfo); ok {
		r0 = rf(ctx, bucket, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectPart provides a mock function with given fields: ctx, bucket, name, start, end
func (_m *ObjectManager) GetObjectPart(ctx context.Context, bucket string, name string, start int64, end int64) (io.Reader, utils.CleanUp, error) {
	ret := _m.Called(ctx, bucket, name, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectPart")
	}

	var r0 io.Reader
	var r1 utils.CleanUp
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) (io.Reader, utils.CleanUp, error)); ok {
		return rf(ctx, bucket, name, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) io.Reader); ok {
		r0 = rf(ctx, bucket, name, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) utils.CleanUp); ok {
		r1 = rf(ctx, bucket, name, start, end)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.CleanUp)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, int64, int64) error); ok {
		r2 = rf(ctx, bucket, name, start, end)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsObjectExist provides a mock function with given fields: ctx, bucket, name
func (_m *ObjectManager) IsObjectExist(ctx context.Context, bucket string, name string) (bool, error) {
	ret := _m.Called(ctx, bucket, name)

	if len(ret) == 0 {
		panic("no return value specified for IsObjectExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, bucket, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, bucket, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllObjects provides a mock function with given fields: ctx, bucket, prefix
func (_m *ObjectManager) ListAllObjects(ctx context.Context, bucket string, prefix string) ([]fs.FileInfo, error) {
	ret := _m.Called(ctx, bucket, prefix)

	if len(ret) == 0 {
		panic("no return value specified for ListAllObjects")
	}

	var r0 []fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]fs.FileInfo, error)); ok {
		return rf(ctx, bucket, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []fs.FileInfo); ok {
		r0 = rf(ctx, bucket, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjects provides a mock function with given fields: ctx, bucket, prefix, count
func (_m *ObjectManager) ListObjects(ctx context.Context, bucket string, prefix string, count int) ([]fs.FileInfo, error) {
	ret := _m.Called(ctx, bucket, prefix, count)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 []fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) ([]fs.FileInfo, error)); ok {
		return rf(ctx, bucket, prefix, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) []fs.FileInfo); ok {
		r0 = rf(ctx, bucket, prefix, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, bucket, prefix, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: ctx, bucket, name, reader
func (_m *ObjectManager) PutObject(ctx context.Context, bucket string, name string, reader io.Reader) (bool, error) {
	ret := _m.Called(ctx, bucket, name, reader)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) (bool, error)); ok {
		return rf(ctx, bucket, name, reader)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) bool); ok {
		r0 = rf(ctx, bucket, name, reader)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader) error); ok {
		r1 = rf(ctx, bucket, name, reader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewObjectManager creates a new instance of ObjectManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObjectManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObjectManager {
	mock := &ObjectManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
